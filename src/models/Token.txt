package models;

import app.App;
import utils.CSV;
import utils.AssetLoader;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Node;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;

public static enum Token{
        None((byte)0),//arrays represent amount of corresponding tokens at each level after the token's introduction
        Minor((byte)7,new byte[]{1,2,3,4,5,6,7,8,7,6,5,4,5,6,5,4,3,2,2,2,2,2,2,2,3,2,2,2,2,3,2,1}),
        Major((byte)15,new byte[]{1,2,3,4,4,4,5,6,7,8,7,6,5,4,3,2,2,3,3,3,3,3,4,5,6,5,4,3,2,1}),
        Great((byte)25,new byte[]{1,2,3,4,5,6,6,6,5,4,3,3,3,3,3,4,5,5,6,7,8,8,8,8,8,8}),
        Ultimate((byte)33,new byte[]{1,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4});
        public final byte firstLevel;
        private final byte[]levelAmounts;
        public final Image icon;
        private Token(byte first,byte...amounts){
            this.firstLevel=first;
            this.levelAmounts=amounts;
            this.icon=new Image('/'+toString()+".png");
        }
        private static final Token[]values=values();
        public static Token value(int i){return values[i];}
        public View getView(){return new View();}
        public int getAmountAtLevel(int level){
            if(level<firstLevel)return 0;
            if(level-firstLevel>=levelAmounts.length)return 0;
            return levelAmounts[level-firstLevel];
        }
        public class View extends ImageView implements Comparable<View>{
            public View(){super(icon);}
            public Token getToken(){return Token.this;}
            @Override public int compareTo(View view){
                return ordinal()-view.getToken().ordinal();
            }
        }
        
        //hack used to turn token pairs into an Enum for use with other classes
        public static enum Pair{
            None_None,Minor_None,Minor_Minor,Major_None,Major_Minor,Major_Major;//,Great_None,Great_Major,Great_Great,Ultimate_None,Ultimate_Great,Ultimate_Ultimate;
            public static Pair get(Token t1,Token t2){return Pair.valueOf(t1+"_"+t2);}
            public View getView(){return new View();}
            public HView getHView(){return new HView();}
            public String string(){return super.toString();}
            @Override public String toString(){return super.toString().replace("None","").replace('_',' ');}
            
            public class View extends VBox implements Comparable<View>{
                public View(){
                    String string=Pair.this.string();
                    int i=string.indexOf('_');
                    getChildren().addAll(Token.valueOf(string.substring(0,i)).getView(),Token.valueOf(string.substring(i+1)).getView());
                }
                public Pair getPair(){return Pair.this;}
                @Override public int compareTo(View view){
                    return ordinal()-view.getPair().ordinal();
                }
            }
            public class HView extends HBox implements Comparable<HView>{
                public HView(){
                    String string=Pair.this.string();
                    int i=string.indexOf('_');
                    getChildren().addAll(Token.valueOf(string.substring(0,i)).getView(),Token.valueOf(string.substring(i+1)).getView());
                }
                public Pair getPair(){return Pair.this;}
                @Override public int compareTo(HView view){
                    return ordinal()-view.getPair().ordinal();
                }
            }
        }
    }